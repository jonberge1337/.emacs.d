
#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Repositorios
  #+BEGIN_SRC emacs-lisp 
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

  #+END_SRC
* Variables de inicio
  quitar el mensaje del principio y los menus
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t) ; Quitar el mensaje del principio
  (tool-bar-mode -1) ; Quitar el menu de copiar pegar 
  (menu-bar-mode -1) ; Quitar el menu de archivo 
  (scroll-bar-mode -1) ; Quitar la barra de scroll
  #+END_SRC

  configurar fuentes dependiendo el sistema operativo
  #+BEGIN_SRC emacs-lisp
	(if (eq system-type 'windows-nt)
	  (setq default-frame-alist '((font . "Consolas-12:antialias=natural")))
	  (setq default-frame-alist '((font . "Dejavu Sans Mono-12")))
	  )
  #+END_SRC
  
  Evitar archivos de copia de seguridad ya que luego se llena de archivos basura
  #+BEGIN_SRC emacs-lisp
	  (setq make-backup-files nil) ; stop creating backup~ files
	  (setq auto-save-default nil) ; stop creating #autosave# files
  #+END_SRC

  Marcar los parentesis
  #+BEGIN_SRC emacs-lisp
	(show-paren-mode 1) ;; remarca parentesis llaves y corchetes
	(setq show-paren-delay 0) ;; evitar tiempo de espera al remarcar
  #+END_SRC
  
  Tabulaciones
  #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode t) ;; tabulaciones no espacios
  (setq-default tab-width 4) ;; tabulaciones de cuatro caracteres  
  #+END_SRC

  numero de lineas
  #+BEGIN_SRC emacs-lisp
  (global-linum-mode 1) ;; ver numero de linea  
  #+END_SRC

  Matar el buffer sin preguntar, siempre y cuando no este guardado el archivo
  #+BEGIN_SRC emacs-lisp
	(defun kill-current-buffer ()
	  "Kills the current buffer."
	  (interactive)
	  (kill-buffer (current-buffer)))
	(global-set-key (kbd "C-x k") 'kill-current-buffer)

  #+END_SRC
* Try
  #+BEGIN_SRC emacs-lisp
  (use-package try
  :ensure t)

  #+END_SRC
* Posframe
  #+BEGIN_SRC emacs-lisp
	(use-package posframe
	  :ensure t)
  #+END_SRC
* Which key
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
  :ensure t 
  :config
  (which-key-mode))

  #+END_SRC
* Org mode
  #+BEGIN_SRC emacs-lisp
	(use-package org-bullets
	  :ensure t
	  :config
	  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  #+END_SRC
* Autopair
  Mucho mejor el electric-pair-mode que el autopair, autopair es mas lento
  #+BEGIN_SRC emacs-lisp
	(use-package autopair
	:disabled
	:config
	(autopair-global-mode))

	(setq electric-pair-pairs '(
							   (?\{ . ?\})
							   (?\( . ?\))
							   (?\[ . ?\])
							   (?\" . ?\")
							   (?\' . ?\')
							   ))
	(electric-pair-mode t)

  #+END_SRC
* Ace windows cambiar ventanas facil
  #+BEGIN_SRC emacs-lisp
	(use-package ace-window
	  :ensure t
	  :init
	  (progn
		(setq aw-scope 'global) ;; was frame
		(global-set-key (kbd "C-x O") 'other-frame)
		(global-set-key [remap other-window] 'ace-window)
		(custom-set-faces
		 '(aw-leading-char-face
		   ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
		))
  #+END_SRC
* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
	(use-package counsel
	  :ensure t
	  )

	(use-package ivy
	  :ensure t
	  :diminish (ivy-mode)
	  :bind (("C-x b" . ivy-switch-buffer))
	  :config
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy))


	(use-package swiper
	  :ensure try
	  :bind (("C-s" . swiper)
			 ("C-r" . swiper)
			 ("C-c C-r" . ivy-resume)
			 ("M-x" . counsel-M-x)
			 ("C-x C-f" . counsel-find-file))
	  :config
	  (progn
		(ivy-mode 1)
		(setq ivy-use-virtual-buffers t)
		(setq ivy-display-style 'fancy)
		(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
		))

  #+END_SRC
* Avy - acceso rapido por letras
  #+BEGIN_SRC emacs-lisp
	(use-package avy
	  :ensure t
	  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC
* Autocomplete
  #+BEGIN_SRC emacs-lisp
	(use-package auto-complete
	  :ensure t
	  :init
	  (progn
		(ac-config-default)
		(global-auto-complete-mode t)
		))

  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
	(use-package company
	  :ensure t
	  :config
	  (setq company-idle-delay 0)
	  (setq company-minimum-prefix-length 3)
  
	  (global-company-mode t)
	  )


	(defun my/python-mode-hook ()
	  (add-to-list 'company-backends 'company-jedi))

	(add-hook 'python-mode-hook 'my/python-mode-hook)
	(use-package company-jedi
	  :ensure t
	  :config
	  (add-hook 'python-mode-hook 'jedi:setup)
	  )

	(defun my/python-mode-hook ()
	  (add-to-list 'company-backends 'company-jedi))

	(add-hook 'python-mode-hook 'my/python-mode-hook)
  #+END_SRC
* Themes
  #+BEGIN_SRC emacs-lisp
	;; (use-package color-theme-sanityinc-tomorrow
	;; :ensure t
	;; :config (load-theme 'sanityinc-tomorrow-eighties t))


	;; (use-package zenburn-theme
	;;   :ensure t
	;;   :config (load-theme 'zenburn t))

	;; (use-package gruvbox-theme
	;;   :ensure t
	;;   :config (load-theme 'gruvbox t))

	(use-package alect-themes
	  :ensure t
	  :config (load-theme 'alect-dark t))

	;; (use-package monokai
	;;   :ensure t
	;;   :config (load-theme 'monokai t))
  #+END_SRC

modeline para probar
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
	:ensure t)
  (require 'doom-modeline)
  (doom-modeline-init)
#+END_SRC

  La barra de abajo
  #+BEGIN_SRC emacs-lisp
	(use-package spaceline
	  :disabled
	  :config
	  (require 'spaceline-config)
	  (setq spaceline-buffer-encoding-abbrev-p nil)
	  (setq spaceline-line-column-p nil)
	  (setq spaceline-line-p nil)
	  (setq powerline-default-separator (quote arrow))
	  (spaceline-spacemacs-theme))
  #+END_SRC

  Poner la hora
  #+BEGIN_SRC emacs-lisp
	;; (setq display-time-24hr-format t)
	;; (setq display-time-format "%H:%M - %d %B %Y")
	;; (display-time-mode 1)
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
	(use-package flycheck
	  :ensure t
	  :init
	  (global-flycheck-mode t))
  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
	;; (use-package jedi
	;;   :ensure t
	;;   :init
	;;   (add-hook 'python-mode-hook 'jedi:setup)
	;;   (add-hook 'python-mode-hook 'jedi:ac-setup))

	(setq py-python-command "python3")
	(setq python-shell-interpreter "python3")


	(use-package elpy
	  :ensure t
	  :config 
	  (elpy-enable))

	(use-package virtualenvwrapper
	  :ensure t
	  :config
	  (venv-initialize-interactive-shells)
	  (venv-initialize-eshell))
  #+END_SRC
